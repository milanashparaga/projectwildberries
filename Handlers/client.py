from aiogram import types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup

from create_bot import bot, dp, CHAT
from Keyboards.keyboard import in_troble_choise, \
    in_no_ad, phone_contact, in_troble_item, \
    in_back_main, back_main_menu, no_add
from database.db import db
from utils import sale


class FSMTroble(StatesGroup):
    photo = State()
    phone = State()
    description = State()


class FSMBroken(StatesGroup):
    photo = State()
    photo_2 = State()
    phone = State()


class FSMClientRegister(StatesGroup):
    name = State()
    phone_number = State()
    confirm = State()


async def have_toble(callback: types.CallbackQuery):
    """–•–µ–Ω–¥–ª–µ—Ä –ø–æ–¥–º–µ–Ω—é '–ü—Ä–æ–±–ª–µ–º—ã —Å —Ç–æ–≤–∞—Ä–æ–º' """
    await callback.answer(cache_time=3)
    await callback.message.edit_text(text='–î–∞–≤–∞–π—Ç–µ —Ä–∞–∑–±–∏—Ä–∞—Ç—å—Å—è, –≤ —á—ë–º –ø—Ä–æ–±–ª–µ–º–∞',
                                     reply_markup=in_troble_choise)


async def wrong_description(callback: types.CallbackQuery):
    """–ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –ø–æ–¥–º–µ–Ω—é'–ü—Ä–æ–±–ª–µ–º—ã —Å —Ç–æ–≤–∞—Ä–æ–º->–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ'"""
    await callback.answer(cache_time=3)
    await FSMTroble.photo.set()
    await bot.send_message(callback.from_user.id,
                           '–ù–∞–º –æ—á–µ–Ω—å –∂–∞–ª—åüò™\n–ü—Ä–∏—à–ª–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ñ–æ—Ç–æ –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è',
                           reply_markup=InlineKeyboardMarkup().add(in_no_ad)
                           )


async def photo_wrong_description(message: types.Message, state: FSMContext):
    """–õ–æ–≤–∏–º —Ñ–æ—Ç–æ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    async with state.proxy() as data:
        data['photo_rep'] = message.photo[0].file_id
    await bot.send_message(message.from_user.id,
                           '–û—Ç–ª–∏—á–Ω–æ, —Ç–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.\n–ü—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –≤–Ω–∏–∑—É',
                           reply_markup=phone_contact
                           )
    await FSMTroble.next()


async def phone_wrong_description(message: types.Message, state: FSMContext):
    """–õ–æ–≤–∏–º —Ç–µ–ª–µ—Ñ–æ–Ω –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    async with state.proxy() as data:
        data['phone_number'] = message.contact.phone_number
    await bot.send_photo(chat_id=CHAT, photo=data['photo_rep'])
    await bot.send_message(
        chat_id=CHAT,
        text=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.username}"
             f"\n–ñ–∞–ª—É–µ—Ç—Å—è –Ω–∞ –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å–≤–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è.\n–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {data['phone_number']}",
        reply_markup=InlineKeyboardMarkup().add(
            InlineKeyboardButton('‚ùó –°–≤—è–∑–∞—Ç—å—Å—è',
                                 url=f'https://t.me/{message.from_user.username}')
        )
    )
    await bot.send_message(message.from_user.id, '–Ø –ø–µ—Ä–µ–¥–∞–ª –≤—Å—ë –º–µ–Ω–µ–¥–∂–µ—Ä—É, –≤ —Å–∫–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏ —Å –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è',
                           reply_markup=InlineKeyboardMarkup().add(in_back_main))
    await state.finish()


async def troble_item(callback: types.CallbackQuery):
    """–ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –ø–æ–¥–º–µ–Ω—é'–ü—Ä–æ–±–ª–µ–º—ã —Å —Ç–æ–≤–∞—Ä–æ–º->–¢–æ–≤–∞—Ä –ø–æ–≤—Ä–µ–∂–¥–µ–Ω'"""
    await callback.answer(cache_time=3)
    await callback.message.edit_text(
        text='–ù–∞–º –æ—á–µ–Ω—å –∂–∞–ª—å!üò™\n'
             '–ù—É–∂–Ω–æ –ø–æ–Ω—è—Ç—å, –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–æ—à–ª–æ –≤ –º–æ–º–µ–Ω—Ç —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –∏–ª–∏ —ç—Ç–æ –∑–∞–≤–æ–¥—Å–∫–æ–π –±—Ä–∞–∫',
        reply_markup=in_troble_item)


async def trobel_item_start(callback: types.CallbackQuery):
    """–ó–∞–ø—É—Å–∫ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è —Ä–µ–ø–æ—Ä—Ç–∞ –æ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞"""
    await callback.answer(cache_time=3)
    await callback.message.edit_text(
        text='–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ,–ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ñ–æ—Ç–æ –∫–æ—Ä–æ–±–∫–∏',
        reply_markup=InlineKeyboardMarkup().add(in_no_ad))
    await FSMBroken.photo.set()


async def trobel_item_box(message: types.Message, state: FSMContext):
    """–õ–æ–≤–∏–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏"""
    async with state.proxy() as data:
        data['photo_item'] = message.photo[0].file_id
    await FSMBroken.next()
    await bot.send_message(message.from_user.id, text='–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ,–ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞',
                           reply_markup=InlineKeyboardMarkup().add(in_no_ad))


async def trobel_item_photo(message: types.Message, state: FSMContext):
    """–õ–æ–≤–∏–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏"""
    async with state.proxy() as data:
        data['photo_box'] = message.photo[0].file_id
    await bot.send_message(message.from_user.id,
                           '–û—Ç–ª–∏—á–Ω–æ, —Ç–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.\n'
                           '–ü—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É —Å–Ω–∏–∑—É',
                           reply_markup=phone_contact
                           )
    await FSMBroken.next()


async def trobel_item_phone(message: types.Message, state: FSMContext):
    """–õ–æ–≤–∏–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    async with state.proxy() as data:
        data['phone'] = message.contact.phone_number
    await bot.send_photo(chat_id=CHAT, photo=data['photo_box'])
    await bot.send_photo(chat_id=CHAT, photo=data['photo_item'])
    await bot.send_message(
        chat_id=CHAT,
        text=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.username}\n"
             f"–ñ–∞–ª—É–µ—Ç—Å—è –Ω–∞ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞.\n"
             f"–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {data['phone']}",
        reply_markup=InlineKeyboardMarkup().add(
            InlineKeyboardButton(
                '‚ùó –°–≤—è–∑–∞—Ç—å—Å—è', url=f'https://t.me/{message.from_user.username}')
        )
    )
    await bot.send_message(message.from_user.id,
                           '–Ø –ø–µ—Ä–µ–¥–∞–ª –≤—Å–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É, –≤ —Å–∫–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏ —Å –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è',
                           reply_markup=InlineKeyboardMarkup().add(in_back_main))

    await state.finish()


async def get_manger(callback: types.CallbackQuery):
    """–•–µ–Ω–¥–ª–µ—Ä –∫–Ω–æ–ø–∫–∏ —Å–≤—è–∑–∏ —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º"""
    await callback.answer(cache_time=3)
    await callback.message.edit_text(text='–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É',
                                     reply_markup=InlineKeyboardMarkup().add(in_no_ad))
    await FSMTroble.description.set()


async def get_manager_finish(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['description'] = message.text
    await bot.send_message(
        chat_id=CHAT,
        text=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.username}\n"
             f"–•–æ—á–µ—Ç —Å–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º.\n"
             f"–ó–∞–ø—Ä–æ—Å:{data['description']}",
        reply_markup=InlineKeyboardMarkup().add(
            InlineKeyboardButton(
                '‚ùó –°–≤—è–∑–∞—Ç—å—Å—è', url=f'https://t.me/{message.from_user.username}')))
    await bot.send_message(message.from_user.id,
                           '–Ø –ø–µ—Ä–µ–¥–∞–ª –≤—Å—ë –º–µ–Ω–µ–¥–∂–µ—Ä—É, –≤ —Å–∫–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏ —Å –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è',
                           reply_markup=InlineKeyboardMarkup().add(in_back_main))
    await state.finish()


async def start_register(message: types.Message):
    """–ó–∞–ø—É—Å–∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if db.check_user(message.from_user.id):
        await bot.send_message(message.from_user.id,
                               text=f'–í–∞—à–∞ —Å–∫–∏–¥–∫–∞: {sale.sale_count(message.from_user.id)}%\n'
                                    f'{sale.info_for_next(message.from_user.id)}',
                               reply_markup=back_main_menu)
    else:
        await FSMClientRegister.name.set()
        await bot.send_message(message.from_user.id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à–µ –∏–º—è',
                               reply_markup=no_add)


async def add_register_name(message: types.Message, state: FSMContext):
    """–õ–æ–≤–∏–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    async with state.proxy() as data:
        data['name'] = message.text
    await FSMClientRegister.next()
    await bot.send_message(message.from_user.id,
                           '–û—Ç–ª–∏—á–Ω–æ, —Ç–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.\n'
                           '–ü—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É —Å–Ω–∏–∑—É',
                           reply_markup=phone_contact)


async def add_phone_register(message: types.Message, state: FSMContext):
    """–õ–æ–≤–∏–º —Ç–µ–ª–µ—Ñ–æ–Ω –∏ id """
    async with state.proxy() as data:
        data['phone'] = message.contact.phone_number
        data['id'] = message.contact.user_id
        data['count'] = 0
    await db.add_user(state)
    await bot.send_message(message.from_user.id, '–û—Ç–ª–∏—á–Ω–æ, —Ç–µ–ø–µ—Ä—å —É –í–∞—Å –µ—Å—Ç—å –Ω–∞—à–∞\n'
                                                 '–ö–∞—Ä—Ç–∞ –õ–æ—è–ª—å–Ω–æ—Å—Ç–∏',
                           reply_markup=back_main_menu)
    await state.finish()


# KaJIuHa
def register_message_client(dis: dp):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤"""
    dis.register_callback_query_handler(have_toble,
                                        text='troble')
    dis.register_callback_query_handler(wrong_description,
                                        text='w_description',
                                        state=None)
    dis.register_message_handler(photo_wrong_description,
                                 content_types=['photo'],
                                 state=FSMTroble.photo)
    dis.register_message_handler(phone_wrong_description,
                                 content_types=types.ContentType.CONTACT,
                                 state=FSMTroble.phone)
    dis.register_callback_query_handler(troble_item,
                                        text='broken')
    dis.register_callback_query_handler(trobel_item_start,
                                        text=['broken_all', 'broken_in'],
                                        state=None)
    dis.register_message_handler(trobel_item_box,
                                 content_types=['photo'],
                                 state=FSMBroken.photo)
    dis.register_message_handler(trobel_item_photo,
                                 content_types=['photo'],
                                 state=FSMBroken.photo_2)
    dis.register_message_handler(trobel_item_phone,
                                 content_types=types.ContentType.CONTACT,
                                 state=FSMBroken.phone)
    dis.register_callback_query_handler(get_manger,
                                        text='manager',
                                        state=None)
    dis.register_message_handler(get_manager_finish,
                                 state=FSMTroble.description)
    dis.register_message_handler(start_register,
                                 commands=['card'])
    dis.register_message_handler(add_register_name,
                                 state=FSMClientRegister.name)
    dis.register_message_handler(add_phone_register,
                                 content_types=types.ContentType.CONTACT,
                                 state=FSMClientRegister.phone_number)
